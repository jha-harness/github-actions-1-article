# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
# I changed this file to test pipeline.

name: GitHub Action CI/CD pipeline E2E

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
        distribution: 'adopt'
        cache: maven
        
    - name: Build with Maven
      run: mvn clean install
      
    - name: Test
      run: mvn --batch-mode -Dmaven.test.failure.ignore=true test
        
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: jhaharness/my-github-action-app
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # - name: SAST Scan - Bear
    #   id: report
    #   with:
    #     format: sarif
    #     output: results.sarif
    #   uses: bearer/bearer-action@v2
      
    # - name: Output Bear report
    #   run: cat ${{ steps.report.outputs.results.sarif }}

   # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
    - name: Run Codacy Analysis CLI
      uses: codacy/codacy-analysis-cli-action@master
      with:
        output: results.sarif
        format: sarif
        # Adjust severity of non-security issues
        gh-code-scanning-compat: true
        # Force 0 exit code to allow SARIF file generation
        # This will hand over control about PR rejection to the GitHub side
        max-allowed-issues: 2147483647
    
    # Upload the SARIF file generated in the previous step
    - name: Upload SARIF results file
      uses: github/codeql-action/upload-sarif@main
      with:
        sarif_file: results.sarif

    - name: Scan image
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: 'jhaharness/my-github-action-app'
        fail-build: false
        
    - name: Inspect action SARIF report
      run: cat ${{ steps.scan.outputs.sarif }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'jhaharness/my-github-action-app'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'


